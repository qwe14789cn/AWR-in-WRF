import numpy as OO0O0OOOO0OOO0OOO #line:5
import math as O0000O0OOOO0OO00O #line:6
from math import pi as OOOOO00O0O00000O0 ,gamma as O0OOO000OOOOOOO00 ,log10 as OO00000000OO0OO00 #line:7
from pytmatrix .psd import UnnormalizedGammaPSD as O00O0000OOO000OOO #line:8
from pytmatrix import radar as O0O00O0000O000OOO #line:9
from mayavi import mlab as O0000O0O0O0OO000O #line:10
def cgsp (O00OOOO00OOO0000O ):#line:14
        [O0OOOO0OOOOOO0OOO ,O00000O00O0O0O0O0 ,O00O0OOOOOO0OO0OO ]=O00OOOO00OOO0000O .shape #line:15
        OO00O0O00OO0000OO =OO0O0OOOO0OOO0OOO .zeros ([O00000O00O0O0O0O0 ,O00O0OOOOOO0OO0OO ,O0OOOO0OOOOOO0OOO ])#line:16
        for OO0OOO000OOOOO000 in xrange (O0OOOO0OOOOOO0OOO ):#line:17
            for OOO0OOOOOOO0O0OO0 in xrange (O00000O00O0O0O0O0 ):#line:18
                for O0OOOO0O0OOO0000O in xrange (O00O0OOOOOO0OO0OO ):#line:19
                    OO00O0O00OO0000OO [O00000O00O0O0O0O0 -OOO0OOOOOOO0O0OO0 -1 ,O0OOOO0O0OOO0000O ,OO0OOO000OOOOO000 ]=O00OOOO00OOO0000O [OO0OOO000OOOOO000 ,OOO0OOOOOOO0O0OO0 ,O0OOOO0O0OOO0000O ]#line:20
        return OO00O0O00OO0000OO #line:21
def drop_ar (O00O000O0O0O0OOO0 ):#line:26
    if O00O000O0O0O0OOO0 <0.7 :#line:27
        return 1.0 ;#line:28
    elif O00O000O0O0O0OOO0 <1.5 :#line:29
        return 1.173 -0.5165 *O00O000O0O0O0OOO0 +0.4698 *O00O000O0O0O0OOO0 **2 -0.1317 *O00O000O0O0O0OOO0 **3 -8.5e-3 *O00O000O0O0O0OOO0 **4 #line:31
    else :#line:32
        return 1.065 -6.25e-2 *O00O000O0O0O0OOO0 -3.99e-3 *O00O000O0O0O0OOO0 **2 +7.66e-4 *O00O000O0O0O0OOO0 **3 -4.095e-5 *O00O000O0O0O0OOO0 **4 #line:34
def data_process (O0O0000OOO00OO0OO ):#line:36
    [O0O0OOO0O000OO00O ,O00OO000OOO000OO0 ,O0OOOOOO0OO0000O0 ]=O0O0000OOO00OO0OO .shape #line:37
    for O0000O0OOOOOOOO00 in xrange (O0O0OOO0O000OO00O ):#line:38
        for OOO0OOOO000OOOO0O in xrange (O00OO000OOO000OO0 ):#line:39
            for OOOOO00O00O00OOOO in xrange (O0OOOOOO0OO0000O0 ):#line:40
                if O0O0000OOO00OO0OO [O0000O0OOOOOOOO00 ,OOO0OOOO000OOOO0O ,OOOOO00O00O00OOOO ]<=1e-10 :#line:41
                    O0O0000OOO00OO0OO [O0000O0OOOOOOOO00 ,OOO0OOOO000OOOO0O ,OOOOO00O00O00OOOO ]=1e-10 #line:42
    return O0O0000OOO00OO0OO #line:43
def setup_tmatrix (O0O00OOOO0O00OOOO ,O000O00OOOO0O00O0 ,OOOO0OOOO0OOO0O00 ,O00O000O0O0O00OO0 ,O00OO000OOOOO00OO ):#line:45
    O0OOO000OOOO0O0OO =1000 #line:49
    O0000OOOO0O0O0OOO =913 #line:50
    O0OOOO0O00OO00O00 =100 #line:51
    if O00OO000OOOOO00OO ==1 :#line:52
        OOO0O0OO0OO0O0OO0 =O0OOO000OOOO0O0OO #line:53
    elif O00OO000OOOOO00OO ==2 :#line:54
        OOO0O0OO0OO0O0OO0 =O0000OOOO0O0O0OOO #line:55
    elif O00OO000OOOOO00OO ==3 :#line:56
        OOO0O0OO0OO0O0OO0 =O0OOOO0O00OO00O00 #line:57
    O0O00O0000O0O0O0O =((O0OOO000OOOOOOO00 (4 +OOOO0OOOO0OOO0O00 )*OOO0O0OO0OO0O0OO0 *O000O00OOOO0O00O0 *OOOOO00O0O00000O0 )/(6 *O0OOO000OOOOOOO00 (1 +OOOO0OOOO0OOO0O00 )*O00O000O0O0O00OO0 *O0O00OOOO0O00OOOO ))**(1.0 /3 )#line:60
    O0O00O0000O0O0O0O =O0O00O0000O0O0O0O *1.0 /1000 #line:61
    O00O0OOO00OO0O0OO =O000O00OOOO0O00O0 *O0O00O0000O0O0O0O **(1 +OOOO0OOOO0OOO0O00 )*O0OOO000OOOOOOO00 (1 +OOOO0OOOO0OOO0O00 )**-1.0 #line:62
    return O00O0OOO00OO0O0OO ,O0O00O0000O0O0O0O #line:64
def num_process (O0OOO0O000O000O00 ):#line:66
    [O0OOOO0O0OO000O00 ,OOO0O00000O0O0O0O ,OO00O00O0OOO0OOO0 ]=O0OOO0O000O000O00 .shape #line:67
    for OOO00OO00OO0O000O in xrange (O0OOOO0O0OO000O00 ):#line:68
        for OOO0O000OOO0OOO00 in xrange (OOO0O00000O0O0O0O ):#line:69
            for O00O000OOOO000OOO in xrange (OO00O00O0OOO0OOO0 ):#line:70
                if O0OOO0O000O000O00 [OOO00OO00OO0O000O ,OOO0O000OOO0OOO00 ,O00O000OOOO000OOO ]<=1 :#line:71
                    O0OOO0O000O000O00 [OOO00OO00OO0O000O ,OOO0O000OOO0OOO00 ,O00O000OOOO000OOO ]=1 #line:72
    return O0OOO0O000O000O00 #line:73
def cal_tm4 (OOOOO00OOOOO0O0O0 ,O00OOOO0OO000OO0O ,OO00O00OO0O0O00O0 ,OOOO0O0OOOO00000O ):#line:75
    OOO0O0OOO00O0OOOO =[]#line:76
    O0000O00OOOO000O0 =[]#line:77
    OOOO0O0O0O0OO00OO =[]#line:78
    OOO00O0OOOOO000O0 =[]#line:79
    OO00O0OOO0OO0O00O =[]#line:80
    OO00OOOO0O0OOOO0O =len (OOOOO00OOOOO0O0O0 )#line:81
    for O0O000O0OOO00000O in range (OO00OOOO0O0OOOO0O ):#line:82
        OOOO0O0OOOO00000O .psd =O00O0000OOO000OOO (N0 =OOOOO00OOOOO0O0O0 [O0O000O0OOO00000O ],Lambda =O00OOOO0OO000OO0O [O0O000O0OOO00000O ],mu =OO00O00OO0O0O00O0 )#line:83
        OO00O0OOO0OO0O00O .append (O0O00O0000O000OOO .refl (OOOO0O0OOOO00000O ))#line:84
        OOO0O0OOO00O0OOOO .append (O0O00O0000O000OOO .Zdr (OOOO0O0OOOO00000O ))#line:85
        O0000O00OOOO000O0 .append (O0O00O0000O000OOO .refl (OOOO0O0OOOO00000O ,h_pol =False ))#line:86
        OOOO0O0O0O0OO00OO .append (O0O00O0000O000OOO .ldr (OOOO0O0OOOO00000O ))#line:87
        OOO00O0OOOOO000O0 .append (O0O00O0000O000OOO .rho_hv (OOOO0O0OOOO00000O ))#line:88
        if O0O000O0OOO00000O %1000 ==0 :#line:89
            print ('\r|'+'='*(50 *O0O000O0OOO00000O /OO00OOOO0O0OOOO0O )+' '*(50 -50 *O0O000O0OOO00000O /OO00OOOO0O0OOOO0O )+'|'+'%1.2f%%'%(100.0 *O0O000O0OOO00000O /OO00OOOO0O0OOOO0O ))#line:90
    OO00O0OOO0OO0O00O =OO0O0OOOO0OOO0OOO .array (OO00O0OOO0OO0O00O )#line:92
    OOO0O0OOO00O0OOOO =OO0O0OOOO0OOO0OOO .array (OOO0O0OOO00O0OOOO )#line:93
    O0000O00OOOO000O0 =OO0O0OOOO0OOO0OOO .array (O0000O00OOOO000O0 )#line:94
    OOOO0O0O0O0OO00OO =OO0O0OOOO0OOO0OOO .array (OOOO0O0O0O0OO00OO )#line:95
    OOO00O0OOOOO000O0 =OO0O0OOOO0OOO0OOO .array (OOO00O0OOOOO000O0 )#line:96
    return OO00O0OOO0OO0O00O ,OOO0O0OOO00O0OOOO ,O0000O00OOOO000O0 ,OOOO0O0O0O0OO00OO ,OOO00O0OOOOO000O0 #line:98
def cal_tm2 (O0OO0O0O00O0O000O ,OO0O0O00O00O0OO0O ,O00000000000OO000 ,O0O00O0OOOO0O0000 ):#line:100
    O000O0OO000OO0O0O =[]#line:101
    O00O00O00O000OOO0 =[]#line:102
    O0OO0OOOOO00OO0OO =len (O0OO0O0O00O0O000O )#line:103
    for O0O0O0OO00OOO000O in range (O0OO0OOOOO00OO0OO ):#line:104
        O0O00O0OOOO0O0000 .psd =O00O0000OOO000OOO (N0 =O0OO0O0O00O0O000O [O0O0O0OO00OOO000O ],Lambda =OO0O0O00O00O0OO0O [O0O0O0OO00OOO000O ],mu =O00000000000OO000 )#line:105
        O000O0OO000OO0O0O .append (O0O00O0000O000OOO .Kdp (O0O00O0OOOO0O0000 ))#line:106
        O00O00O00O000OOO0 .append (O0O00O0000O000OOO .Ai (O0O00O0OOOO0O0000 ))#line:107
        if O0O0O0OO00OOO000O %1000 ==0 :#line:108
            print ('\r|'+'='*(50 *O0O0O0OO00OOO000O /O0OO0OOOOO00OO0OO )+' '*(50 -50 *O0O0O0OO00OOO000O /O0OO0OOOOO00OO0OO )+'|'+'%1.2f%%'%(100.0 *O0O0O0OO00OOO000O /O0OO0OOOOO00OO0OO ))#line:109
    O000O0OO000OO0O0O =OO0O0OOOO0OOO0OOO .array (O000O0OO000OO0O0O )#line:110
    O00O00O00O000OOO0 =OO0O0OOOO0OOO0OOO .array (O00O00O00O000OOO0 )#line:111
    return O000O0OO000OO0O0O ,O00O00O00O000OOO0 #line:113
def compare2 (OOOOO00O00OOO000O ,O0O0O0OO0OOO00O00 ,threshold =1.0 ):#line:118
	[O00OOOO00O00OOOOO ,OO0000O0000O0OO0O ]=OOOOO00O00OOO000O .shape #line:119
	for OOOOO00000O000OOO in xrange (O00OOOO00O00OOOOO ):#line:120
		for O0O0OOO0000O00OO0 in xrange (OO0000O0000O0OO0O ):#line:121
			if O0O0O0OO0OOO00O00 [OOOOO00000O000OOO ,O0O0OOO0000O00OO0 ]<=threshold :#line:122
				OOOOO00O00OOO000O [OOOOO00000O000OOO ,O0O0OOO0000O00OO0 ]=OO0O0OOOO0OOO0OOO .float ('nan')#line:123
	return OOOOO00O00OOO000O #line:124
def lg_refl (O00O0000O00OO0OO0 ):#line:126
    [O00000O0OO0000OO0 ,OO0O00OO00000OOOO ,OO0OO0O0OO0O0OO0O ]=O00O0000O00OO0OO0 .shape #line:127
    for O00OOOO00O0O0O0OO in xrange (O00000O0OO0000OO0 ):#line:128
        for OOOO0OOO0OO000O00 in xrange (OO0O00OO00000OOOO ):#line:129
            for OOOOO00OOO00O0O0O in xrange (OO0OO0O0OO0O0OO0O ):#line:130
                    O00O0000O00OO0OO0 [O00OOOO00O0O0O0OO ,OOOO0OOO0OO000O00 ,OOOOO00OOO00O0O0O ]=10 *OO00000000OO0OO00 (O00O0000O00OO0OO0 [O00OOOO00O0O0O0OO ,OOOO0OOO0OO000O00 ,OOOOO00OOO00O0O0O ])#line:131
    return O00O0000O00OO0OO0 #line:132
def lg_refl2 (O0OO000OOO0000O0O ):#line:135
    [O0000O000O0OO00OO ,OOOOOOOO0OO0OO000 ]=O0OO000OOO0000O0O .shape #line:136
    for OOO0O0O0OO000OO00 in xrange (O0000O000O0OO00OO ):#line:137
        for O00OOOOOOOOOO0O0O in xrange (OOOOOOOO0OO0OO000 ):#line:138
            O0OO000OOO0000O0O [OOO0O0O0OO000OO00 ,O00OOOOOOOOOO0O0O ]=10 *OO00000000OO0OO00 (O0OO000OOO0000O0O [OOO0O0O0OO000OO00 ,O00OOOOOOOOOO0O0O ])#line:139
    return O0OO000OOO0000O0O #line:140
def refl_process (O000O0O00O0OOOOO0 ):#line:142
    [OOO00OOOO0OO00OO0 ,OO00O00O0OO000OO0 ,OOOOO0000OOO0O0OO ]=O000O0O00O0OOOOO0 .shape #line:143
    for O0000O0O0O000O000 in xrange (OOO00OOOO0OO00OO0 ):#line:144
        for OO0O0OO000O0O0O0O in xrange (OO00O00O0OO000OO0 ):#line:145
            for O00O0OOO0OOO0O00O in xrange (OOOOO0000OOO0O0OO ):#line:146
                if O000O0O00O0OOOOO0 [O0000O0O0O000O000 ,OO0O0OO000O0O0O0O ,O00O0OOO0OOO0O00O ]<=1e-30 :#line:147
                    O000O0O00O0OOOOO0 [O0000O0O0O000O000 ,OO0O0OO000O0O0O0O ,O00O0OOO0OOO0O00O ]=1e-30 #line:148
    return O000O0O00O0OOOOO0 #line:149
def zdr_nan_sum (O00OO0OO0O0OO00OO ):#line:151
    O0OOOOOO0O0O0OO00 =OO0O0OOOO0OOO0OOO .logical_not (OO0O0OOOO0OOO0OOO .isnan (O00OO0OO0O0OO00OO ))#line:152
    O0O0OOO0O0OOOOO00 =len (O00OO0OO0O0OO00OO )#line:153
    O00000OO0OOOO0O00 =[]#line:154
    O0O00OO000OO0OOO0 =0.0 #line:155
    for O0O0000OO00OOOO0O in range (O0O0OOO0O0OOOOO00 ):#line:156
        if O0OOOOOO0O0O0OO00 [O0O0000OO00OOOO0O ]==True :#line:157
            O00000OO0OOOO0O00 .append (O00OO0OO0O0OO00OO [O0O0000OO00OOOO0O ])#line:158
            O0O00OO000OO0OOO0 =O0O00OO000OO0OOO0 +1.0 #line:159
    if O0O00OO000OO0OOO0 ==0.0 :#line:160
        return float ('nan')#line:161
    else :#line:162
        return OO0O0OOOO0OOO0OOO .sum (O00000OO0OOOO0O00 )/O0O00OO000OO0OOO0 #line:163
def rhv_nan_sum (O0OO00O0OO0000OO0 ):#line:165
    OOOO0O0O0OOO0OOO0 =OO0O0OOOO0OOO0OOO .logical_not (OO0O0OOOO0OOO0OOO .isnan (O0OO00O0OO0000OO0 ))#line:166
    OO00O000OOO00O0OO =len (O0OO00O0OO0000OO0 )#line:167
    OOO00OOOOOOOOO0O0 =[]#line:168
    OOO00OO000OO0OOOO =0.0 #line:169
    for O0OO0O0O0O0OO0000 in range (OO00O000OOO00O0OO ):#line:170
        if OOOO0O0O0OOO0OOO0 [O0OO0O0O0O0OO0000 ]==True :#line:171
            OOO00OOOOOOOOO0O0 .append (O0OO00O0OO0000OO0 [O0OO0O0O0O0OO0000 ])#line:172
            OOO00OO000OO0OOOO =OOO00OO000OO0OOOO +1.0 #line:173
    if OOO00OO000OO0OOOO ==0.0 :#line:174
        return float ('nan')#line:175
    else :#line:176
        return OO0O0OOOO0OOO0OOO .sum (OOO00OOOOOOOOO0O0 )/OOO00OO000OO0OOOO #line:177
def kdp_nan_sum (OOOOO0OOOOO00000O ):#line:179
    O0OO0000O000O0OO0 =OO0O0OOOO0OOO0OOO .logical_not (OO0O0OOOO0OOO0OOO .isnan (OOOOO0OOOOO00000O ))#line:180
    O000OO00O00O0OOO0 =len (OOOOO0OOOOO00000O )#line:181
    OO00OOO00O00O0O0O =[]#line:182
    OO0OO00OOOOO0OOOO =0.0 #line:183
    for OO0OOOOO0000O0O00 in range (O000OO00O00O0OOO0 ):#line:184
        if O0OO0000O000O0OO0 [OO0OOOOO0000O0O00 ]==True :#line:185
            OO00OOO00O00O0O0O .append (OOOOO0OOOOO00000O [OO0OOOOO0000O0O00 ])#line:186
            OO0OO00OOOOO0OOOO =OO0OO00OOOOO0OOOO +1.0 #line:187
    if OO0OO00OOOOO0OOOO ==0.0 :#line:188
        return float ('nan')#line:189
    else :#line:190
        return OO0O0OOOO0OOO0OOO .sum (OO00OOO00O00O0O0O )#line:191
def zdr_nan_data_add (*O00O0OOOO0O0O00O0 ):#line:193
    OOOO00OO0OOOOOOO0 =len (O00O0OOOO0O0O00O0 )#line:194
    OO0OOOO0OO0000OO0 =len (O00O0OOOO0O0O00O0 [0 ])#line:195
    OOOOOO0O000O00O0O =[]#line:196
    for OO00O00O0O000O0OO in range (OO0OOOO0OO0000OO0 ):#line:197
        OO00O0OOO0O0OO0OO =[]#line:198
        for O0O000OOO00OO00O0 in range (OOOO00OO0OOOOOOO0 ):#line:199
            OO00O0OOO0O0OO0OO .append (O00O0OOOO0O0O00O0 [O0O000OOO00OO00O0 ][OO00O00O0O000O0OO ])#line:200
        OOOOOO0O000O00O0O .append (zdr_nan_sum (OO00O0OOO0O0OO0OO ))#line:201
    return OOOOOO0O000O00O0O #line:202
def rhv_nan_data_add (*OOOOO00OOO0OO0O00 ):#line:204
    OOO00OO00OOOOOO0O =len (OOOOO00OOO0OO0O00 )#line:205
    O000OO00000000000 =len (OOOOO00OOO0OO0O00 [0 ])#line:206
    OO000OOO00O00OO00 =[]#line:207
    for OOOOO0OOO00OOOOOO in range (O000OO00000000000 ):#line:208
        O0OO000OOO0000OOO =[]#line:209
        for OO000OOOO00OO0OO0 in range (OOO00OO00OOOOOO0O ):#line:210
            O0OO000OOO0000OOO .append (OOOOO00OOO0OO0O00 [OO000OOOO00OO0OO0 ][OOOOO0OOO00OOOOOO ])#line:211
        OO000OOO00O00OO00 .append (rhv_nan_sum (O0OO000OOO0000OOO ))#line:212
    return OO000OOO00O00OO00 #line:213
def kdp_nan_data_add (*OOOOO00O00OOOO00O ):#line:215
    O0O00O0O0O00OO00O =len (OOOOO00O00OOOO00O )#line:216
    OO0OOO0O00O0OO00O =len (OOOOO00O00OOOO00O [0 ])#line:217
    OOOOO00O0O0OOOOO0 =[]#line:218
    for OO000OOO00OO0OOOO in range (OO0OOO0O00O0OO00O ):#line:219
        O000OOO00OOO0O0OO =[]#line:220
        for O000OO00OOO0O00OO in range (O0O00O0O0O00OO00O ):#line:221
            O000OOO00OOO0O0OO .append (OOOOO00O00OOOO00O [O000OO00OOO0O00OO ][OO000OOO00OO0OOOO ])#line:222
        OOOOO00O0O0OOOOO0 .append (kdp_nan_sum (O000OOO00OOO0O0OO ))#line:223
    return OOOOO00O0O0OOOOO0 #line:224
def del_nan (OO00O0OO0OOO00000 ):#line:226
    [O0OOO00OOOO000OO0 ,O0O0OO0O0O0OOOO0O ,O0O0OOO000OOO00OO ]=OO00O0OO0OOO00000 .shape #line:227
    for OOOOOOO0000000OO0 in xrange (O0OOO00OOOO000OO0 ):#line:228
        for OO00O0O00O0O0O0OO in xrange (O0O0OO0O0O0OOOO0O ):#line:229
            for O0OOOOOO000OOOOOO in xrange (O0O0OOO000OOO00OO ):#line:230
                if OO0O0OOOO0OOO0OOO .isnan (OO00O0OO0OOO00000 [OOOOOOO0000000OO0 ,OO00O0O00O0O0O0OO ,O0OOOOOO000OOOOOO ]):#line:231
                    OO00O0OO0OOO00000 [OOOOOOO0000000OO0 ,OO00O0O00O0O0O0OO ,O0OOOOOO000OOOOOO ]=0 #line:232
    return OO00O0OO0OOO00000 #line:233
def trans_read_data (O0000OOOO0OOO0O0O ,OOOOO000O00OO00O0 ,OOOOO0000OO0OOOO0 ,O000OO0OOO0000OO0 ,Dx =5000.0 ,Dy =5000.0 ):#line:239
    [O00OO00000OOOO000 ,OOOOOO0O0OO00O00O ,O0O0O00OO0OOOOO00 ]=O0000OOOO0OOO0O0O .shape #line:240
    O000OOOO0OOO0OOO0 =[0.0 ,56.6 ,137.9 ,244.7 ,377.6 ,546.3 ,761.1 ,1016.2 ,1455.3 ,1914.6 ,2396.2 ,2902.5 ,3845.1 ,4787.7 ,5730.3 ,6672.9 ,7615.5 ,8558.1 ,9500.7 ,10443.3 ,11385.9 ,12328.5 ,13271.1 ,14213.7 ,15156.3 ,16098.9 ,17041.5 ,17984.1 ,18926.7 ,19869.3 ]#line:244
    OO0000O00000OO000 =OOOOO000O00OO00O0 /Dx #line:246
    O000O000O0O0OO00O =OOOOO0000OO0OOOO0 /Dy #line:247
    for OOOOO0OO000O0OOOO in xrange (len (O000OOOO0OOO0OOO0 )):#line:249
        if OOOOO0OO000O0OOOO ==(len (O000OOOO0OOO0OOO0 )-1 ):#line:250
            break #line:251
        if O000OO0OOO0000OO0 >=O000OOOO0OOO0OOO0 [OOOOO0OO000O0OOOO ]and O000OO0OOO0000OO0 <=O000OOOO0OOO0OOO0 [OOOOO0OO000O0OOOO +1 ]:#line:252
            break #line:253
    O0O0OO00OO0000O00 =OOOOO0OO000O0OOOO #line:254
    O00000O0O00O0O00O =O0O0OO00OO0000O00 +1 #line:255
    O000000O00OOOO000 =int (O0000O0OOOO0OO00O .floor (OO0000O00000OO000 ))#line:257
    O00OOOOO0O00000OO =int (O0000O0OOOO0OO00O .floor (O000O000O0O0OO00O ))#line:258
    O00OO000O00O00000 =O000000O00OOOO000 +1 #line:260
    OOO0O0OOO0O00OOO0 =O00OOOOO0O00000OO +1 #line:261
    if O00OO000O00O00000 ==(O00OO00000OOOO000 ):#line:263
        O00OO000O00O00000 =O00OO000O00O00000 -1 #line:264
    if OOO0O0OOO0O00OOO0 ==(OOOOOO0O0OO00O00O ):#line:265
        OOO0O0OOO0O00OOO0 =OOO0O0OOO0O00OOO0 -1 #line:266
    if O00000O0O00O0O00O ==(O0O0O00OO0OOOOO00 ):#line:267
        O00000O0O00O0O00O =O00000O0O00O0O00O -1 #line:268
    O000O0OO0000OO00O =zdr_nan_data_add ([O0000OOOO0OOO0O0O [O000000O00OOOO000 ,O00OOOOO0O00000OO ,O0O0OO00OO0000O00 ]],[O0000OOOO0OOO0O0O [O000000O00OOOO000 ,O00OOOOO0O00000OO ,O00000O0O00O0O00O ]],[O0000OOOO0OOO0O0O [O000000O00OOOO000 ,OOO0O0OOO0O00OOO0 ,O0O0OO00OO0000O00 ]],[O0000OOOO0OOO0O0O [O000000O00OOOO000 ,OOO0O0OOO0O00OOO0 ,O00000O0O00O0O00O ]],[O0000OOOO0OOO0O0O [O00OO000O00O00000 ,O00OOOOO0O00000OO ,O0O0OO00OO0000O00 ]],[O0000OOOO0OOO0O0O [O00OO000O00O00000 ,O00OOOOO0O00000OO ,O00000O0O00O0O00O ]],[O0000OOOO0OOO0O0O [O00OO000O00O00000 ,OOO0O0OOO0O00OOO0 ,O0O0OO00OO0000O00 ]],[O0000OOOO0OOO0O0O [O00OO000O00O00000 ,OOO0O0OOO0O00OOO0 ,O00000O0O00O0O00O ]])#line:273
    return O000O0OO0000OO00O [0 ]#line:274
def scan_angle (OOO0OO00000O0O0O0 ,O00OOO0O0OOO0OOO0 ):#line:277
   O0OOO0O0O0OOOOOOO =OO0O0OOOO0OOO0OOO .cos (OOO0OO00000O0O0O0 )*OO0O0OOOO0OOO0OOO .sin (O00OOO0O0OOO0OOO0 )#line:278
   O0OOO0O0000O0O0OO =OO0O0OOOO0OOO0OOO .cos (OOO0OO00000O0O0O0 )*OO0O0OOOO0OOO0OOO .cos (O00OOO0O0OOO0OOO0 )#line:279
   OOO0O000O00OOO0O0 =OO0O0OOOO0OOO0OOO .sin (OOO0OO00000O0O0O0 )#line:280
   O00O0OO000O0O0O0O =OO0O0OOOO0OOO0OOO .sqrt (OOO0O000O00OOO0O0 **2 +O0OOO0O0000O0O0OO **2 )#line:281
   return OO0O0OOOO0OOO0OOO .arcsin (OOO0O000O00OOO0O0 /O00O0OO000O0O0O0O ),OO0O0OOOO0OOO0OOO .arctan (O0OOO0O0O0OOOOOOO /O00O0OO000O0O0O0O )#line:282
def scanning (O0000OOOOO000OOO0 ,O0O000OO0O0O0O00O ,off_X =276832 ,off_Y =0 ,off_Z =3000 ):#line:285
    O0O000OO0O0O0O00O =0.0 /180.0 *OOOOO00O0O00000O0 #line:286
    [OO000O0OOOOOO0OO0 ,O0O000OOO0OO00OO0 ,OO000OOOOOO00OO00 ]=O0000OOOOO000OOO0 .shape #line:288
    OOOO000O000O00O00 =3e8 #line:289
    OO0000O000O0O0OO0 =18e-6 #line:290
    OOOOOO0000O0OOO0O =380 #line:291
    O0O0OO0O0O00O0O0O =2 #line:292
    O0O00O0O000O0O000 =OOOOOO0000O0OOO0O *O0O0OO0O0O00O0O0O #line:293
    O0OOOO00OOO00O0O0 =OO0000O000O0O0OO0 *OOOO000O000O00O00 /2.0 #line:295
    O0OO0O00OO0O00OOO =1.0 /OOOOOO0000O0OOO0O *OOOO000O000O00O00 /2.0 #line:296
    OO0O00O0OOOOOO0OO =90.0 /O0O00O0O000O0O000 /180.0 *OOOOO00O0O00000O0 #line:300
    OOOOOO000O00O00O0 =int (90.0 /OO0O00O0OOOOOO0OO /180.0 *OOOOO00O0O00000O0 )#line:301
    O0O0000OO0O00OOO0 =OO0O0OOOO0OOO0OOO .zeros ([OOOOOO000O00O00O0 ,int (O0OO0O00OO0O00OOO /O0OOOO00OOO00O0O0 )])#line:306
    OOOOOO000OO00O0O0 =OO0O0OOOO0OOO0OOO .zeros ([OOOOOO000O00O00O0 ,int (O0OO0O00OO0O00OOO /O0OOOO00OOO00O0O0 )])#line:307
    O00O0OO0O00OO0O0O =OO0O0OOOO0OOO0OOO .zeros ([OOOOOO000O00O00O0 ,int (O0OO0O00OO0O00OOO /O0OOOO00OOO00O0O0 )])#line:308
    O00000OOO0O0000O0 =OO0O0OOOO0OOO0OOO .linspace (-45 ,45 ,OOOOOO000O00O00O0 )/180.0 *OOOOO00O0O00000O0 #line:309
    for O0O0OOO0OOOOOOOO0 in xrange (len (O00000OOO0O0000O0 )):#line:310
        for O0O00O0OOO0000OOO in xrange (int (O0OO0O00OO0O00OOO /O0OOOO00OOO00O0O0 )):#line:311
            O0O00OO0OO0OO00OO ,O0O0OO00OO0O0OO00 =scan_angle (O00000OOO0O0000O0 [O0O0OOO0OOOOOOOO0 ],O0O000OO0O0O0O00O )#line:312
            O0O0000OO0O00OOO0 [O0O0OOO0OOOOOOOO0 ,O0O00O0OOO0000OOO ]=O0OOOO00OOO00O0O0 *O0O00O0OOO0000OOO *OO0O0OOOO0OOO0OOO .cos (O0O0OO00OO0O0OO00 )*OO0O0OOOO0OOO0OOO .sin (O0O00OO0OO0OO00OO )#line:313
            OOOOOO000OO00O0O0 [O0O0OOO0OOOOOOOO0 ,O0O00O0OOO0000OOO ]=O0OOOO00OOO00O0O0 *O0O00O0OOO0000OOO *OO0O0OOOO0OOO0OOO .cos (O0O0OO00OO0O0OO00 )*OO0O0OOOO0OOO0OOO .cos (O0O00OO0OO0OO00OO )#line:314
            O00O0OO0O00OO0O0O [O0O0OOO0OOOOOOOO0 ,O0O00O0OOO0000OOO ]=O0OOOO00OOO00O0O0 *O0O00O0OOO0000OOO *OO0O0OOOO0OOO0OOO .sin (O0O0OO00OO0O0OO00 )#line:315
    O0O0000OO0O00OOO0 =O0O0000OO0O00OOO0 +off_X #line:317
    OOOOOO000OO00O0O0 =OOOOOO000OO00O0O0 +off_Y #line:318
    O00O0OO0O00OO0O0O =O00O0OO0O00OO0O0O +off_Z #line:319
    [O0O00O0O00O000O0O ,OO00OO0OOOO0OOOOO ]=O0O0000OO0O00OOO0 .shape #line:321
    OO0O00OOOO00OOOOO =OO0O0OOOO0OOO0OOO .zeros ([O0O00O0O00O000O0O ,OO00OO0OOOO0OOOOO ])#line:322
    for O0O0000O00000O00O in xrange (O0O00O0O00O000O0O ):#line:324
            for O00O0OOO00OO00OO0 in xrange (OO00OO0OOOO0OOOOO ):#line:325
                OO0O00OOOO00OOOOO [O0O0000O00000O00O ,O00O0OOO00OO00OO0 ]=trans_read_data (O0000OOOOO000OOO0 ,O0O0000OO0O00OOO0 [O0O0000O00000O00O ,O00O0OOO00OO00OO0 ],OOOOOO000OO00O0O0 [O0O0000O00000O00O ,O00O0OOO00OO00OO0 ],O00O0OO0O00OO0O0O [O0O0000O00000O00O ,O00O0OOO00OO00OO0 ],Dx =5000.0 ,Dy =5000.0 )#line:326
    return O0O0000OO0O00OOO0 ,OOOOOO000OO00O0O0 ,O00O0OO0O00OO0O0O ,OO0O00OOOO00OOOOO #line:329
def t_data_plot (O000OO000OO0OO000 ,OO00O000O0000O0O0 ,O00O00OO000O0O0OO ,O0O0O0O000OO0OO00 ,zdr_flag =0 ,data_min =1.01 ):#line:332
    O0000O00O00O0OOO0 =(45.0 ,54.735610317245346 ,607.35769190957262 ,OO0O0OOOO0OOO0OOO .array ([89.80421373 ,137.88978957 ,7.30599671 ]))#line:335
    OO0O0000OOOO0OOO0 ,OOOO0OOOO0O0OO000 ,OOOO00O00O0OOO0O0 =O000OO000OO0OO000 .shape #line:337
    O0000O0O0O0OO000O .figure (OO00O000O0000O0O0 ,bgcolor =(1 ,1 ,1 ),fgcolor =(0 ,0 ,0 ),size =(700 ,600 ))#line:338
    if zdr_flag ==1 :#line:340
        OO0OO00O00OOO0O00 =O0000O0O0O0OO000O .contour3d (O000OO000OO0OO000 [:,:,:],vmin =data_min ,colormap ='jet')#line:341
    else :#line:342
        OO0OO00O00OOO0O00 =O0000O0O0O0OO000O .contour3d (O000OO000OO0OO000 [:,:,:],vmin =-30.0 ,colormap ='jet')#line:343
    OO0OO00O00OOO0O00 .contour .number_of_contours =O0O0O0O000OO0OO00 #line:344
    OO0OO00O00OOO0O00 .actor .property .opacity =0.4 #line:345
    O0000O0O0O0OO000O .title (OO00O000O0000O0O0 )#line:346
    O0000O0O0O0OO000O .outline (color =(0 ,0 ,0 ),extent =[0 ,OO0O0000OOOO0OOO0 ,0 ,OOOO0OOOO0O0OO000 ,0 ,OOOO00O00O0OOO0O0 ])#line:347
    O00O00O0O00OO0OO0 =O0000O0O0O0OO000O .colorbar (title =O00O00OO000O0O0OO ,orientation ='vertical',nb_labels =10 )#line:348
    O00O00O0O00OO0OO0 .scalar_bar_representation .position =[0.85 ,0.1 ]#line:349
    O00O00O0O00OO0OO0 .scalar_bar_representation .position2 =[0.12 ,0.9 ]#line:350
    O0000O0O0O0OO000O .view (*O0000O00O00O0OOO0 )#line:351
    O0000O0O0O0OO000O .show ()#line:352
def min_process2 (O0O00000O00OOO0OO ):#line:354
    [O0O0OO00OOO0OO000 ,O0O00O00O00OO0OOO ]=O0O00000O00OOO0OO .shape #line:355
    for O0O0O000OOO0000OO in xrange (O0O0OO00OOO0OO000 ):#line:356
        for OO0OO0OO00OO0O000 in xrange (O0O00O00O00OO0OOO ):#line:357
            if O0O00000O00OOO0OO [O0O0O000OOO0000OO ,OO0OO0OO00OO0O000 ]<=0 :#line:358
                    O0O00000O00OOO0OO [O0O0O000OOO0000OO ,OO0OO0OO00OO0O000 ]=0 #line:359
    return O0O00000O00OOO0OO 
#e9015584e6a44b14988f13e2298bcbf9


#===============================================================#
# Obfuscated by Oxyry Python Obfuscator (http://pyob.oxyry.com) #
#===============================================================#
