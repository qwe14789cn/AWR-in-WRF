# -*- coding: utf-8 -*-
"""
Created on Wed Aug 26 16:09:05 2015

@author: qwe14789cn
"""
import numpy as np
from math import pi,gamma,log10
from pytmatrix.tmatrix import Scatterer
from pytmatrix.psd import PSDIntegrator,UnnormalizedGammaPSD
from pytmatrix import orientation,radar,tmatrix_aux,refractive
import os
'''
scatterer = Scatterer(wavelength=tmatrix_aux.wl_X,m=refractive.m_w_10C[tmatrix_aux.wl_X])
scatterer.psd_integrator = PSDIntegrator()
scatterer.psd_integrator.axis_ratio_func = lambda D: 1.0/drop_ar(D)
scatterer.psd_integrator.D_max=10.0
scatterer.psd_integrator.geometries=(tmatrix_aux.geom_horiz_back,tmatrix_aux.geom_horiz_forw)
scatterer.or_pdf = orientation.gaussian_pdf(20.0)
scatterer.orient = orientation.orient_averaged_fixed
scatterer.psd_integrator.init_scatter_table(scatterer)
'''
#------------------------------------------------------------------------------
#   this is axis ratio function
#------------------------------------------------------------------------------
def drop_ar(D_eq):
    if D_eq <0.7:
        return 1.0;
    elif D_eq <1.5:
        return 1.173-0.5165*D_eq +0.4698*D_eq**2-0.1317*D_eq**3-\
            8.5e-3*D_eq**4
    else:
        return 1.065-6.25e-2*D_eq -3.99e-3*D_eq**2+7.66e-4*D_eq**3-\
            4.095e-5*D_eq**4


def lg_refl(data):
    [aaa,bbb,ccc]=data.shape
    for aa in xrange(aaa):
        for bb in xrange(bbb):
            for cc in xrange(ccc):
                    data[aa,bb,cc]=10*log10(data[aa,bb,cc])
        print '\r|'+'='*(50*(cc+bb*ccc+aa*bbb*ccc)/(aaa*bbb*ccc)) \
        +' '*(50-50*(cc+bb*ccc+aa*bbb*ccc)/(aaa*bbb*ccc))+'|'\
        +'%1.2f%%' %(100*(cc+bb*ccc+aa*bbb*ccc)/(aaa*bbb*ccc)),
    return data
    
    
def data_process(data):
    [aaa,bbb,ccc]=data.shape
    for aa in xrange(aaa):
        for bb in xrange(bbb):
            for cc in xrange(ccc):
                if data[aa,bb,cc]<=1e-10:
                    data[aa,bb,cc]=1e-10
        print '\r|'+'='*(50*(cc+bb*ccc+aa*bbb*ccc)/(aaa*bbb*ccc)) \
        +' '*(50-50*(cc+bb*ccc+aa*bbb*ccc)/(aaa*bbb*ccc))+'|'\
        +'%1.2f%%' %(100*(cc+bb*ccc+aa*bbb*ccc)/(aaa*bbb*ccc)),
    return data

def setup_tmatrix(Q,Nt,gamma_u,RHO,choice):
    #----------------------
    # choice= 1,2,3 select rain,hail,snow    
    
    RHO_rain     =     1000
    RHO_hail     =     913
    RHO_snow     =     100
    if choice==1:
        RHO_c=RHO_rain
    elif choice==2:
        RHO_c=RHO_hail
    elif choice==3:
        RHO_c=RHO_snow        
        
        
    lamda = ((gamma(4+gamma_u)*RHO_c*Nt*pi)/(6*gamma(1+gamma_u)*RHO*Q))**(1.0/3)
    lamda = lamda *1.0/1000    
    n0= Nt*lamda**(1+gamma_u)*gamma(1+gamma_u)**-1.0
    
    return n0,lamda
    
    
    
def num_process(data):
    [aaa,bbb,ccc]=data.shape
    for aa in xrange(aaa):
        for bb in xrange(bbb):
            for cc in xrange(ccc):
                if data[aa,bb,cc]<=1:
                    data[aa,bb,cc]=1
        print '\r|'+'='*(50*(cc+bb*ccc+aa*bbb*ccc)/(aaa*bbb*ccc)) \
        +' '*(50-50*(cc+bb*ccc+aa*bbb*ccc)/(aaa*bbb*ccc))+'|'\
        +'%1.2f%%' %(100*(cc+bb*ccc+aa*bbb*ccc)/(aaa*bbb*ccc)),

    return data
    
def cal_tm4(n0,lamda,u,scatterer):
    rain_zdr=[]
    rain_zi=[]
    rain_ldr=[]
    rain_rhv=[]
    rain_refl=[]
    length=len(n0)
    for i in range(length):
        scatterer.psd=UnnormalizedGammaPSD(N0=n0[i],Lambda=lamda[i],mu=u)
        rain_refl.append(radar.refl(scatterer))
        rain_zdr.append(radar.Zdr(scatterer))
        rain_zi.append(radar.Zi(scatterer))
        rain_ldr.append(radar.ldr(scatterer))
        rain_rhv.append(radar.rho_hv(scatterer))
        if i%1000==0:
            print '\r|'+'='*(50*i/length)+' '*(50-50*i/length)+'|'+'%1.2f%%' %(100.0*i/length),
            
    rain_refl = np.array(rain_refl)
    rain_zdr  = np.array(rain_zdr)
    rain_zi   = np.array(rain_zi)
    rain_ldr  = np.array(rain_ldr)
    rain_rhv  = np.array(rain_rhv)
    
    return rain_refl,rain_zdr,rain_zi,rain_ldr,rain_rhv
    
    
def cal_tm2(n0,lamda,u,scatterer):
    rain_kdp=[]
    rain_ai=[]
    length=len(n0)
    for i in range(length):
        scatterer.psd=UnnormalizedGammaPSD(N0=n0[i],Lambda=lamda[i],mu=u)
        rain_kdp.append(radar.Kdp(scatterer))
        rain_ai.append(radar.Ai(scatterer))
        if i%1000==0:
            print '\r|'+'='*(50*i/length)+' '*(50-50*i/length)+'|'+'%1.2f%%' %(100.0*i/length), 

    rain_kdp=np.array(rain_kdp)
    rain_ai =np.array(rain_ai)    
    
    return rain_kdp,rain_ai


def fun(main_dir,input_data,output_data):
    os.chdir(main_dir+input_data)
    print 'loading data...',

    QRAIN    =np.load('QRAIN.npy')
    QNRAIN   =np.load('QNRAIN.npy')

    QHAIL    =np.load('QHAIL.npy')
    QNHAIL   =np.load('QNHAIL.npy')

    QSNOW    =np.load('QSNOW.npy')
    QNSNOW   =np.load('QNSNOW.npy')

    QICE     =np.load('QICE.npy')
    QNICE    =np.load('QNICE.npy')
    
    QGRAUP   =np.load('QGRAUP.npy')
    QNGRAUPEL=np.load('QNGRAUPEL.npy')

    QCLOUD   =np.load('QCLOUD.npy')
    QNCLOUD  =np.load('QNCLOUD.npy')

    RHO      =np.load('RHO.npy')

    REFL_10CM=np.load('REFL_10CM.npy')
    Pa       =np.load('Pa.npy')
    Tem      =np.load('Tem.npy')
    
    print 'finished'
    #-------------------------------------------------------------------------
    print 'start using T-matrix tools...'
 
    Qr    =    QRAIN  
    Qh    =    QHAIL  
    Qs    =    QSNOW  
    Qi    =    QICE       
    Qg    =    QGRAUP
    Qc    =    QCLOUD

    Qnr   =    QNRAIN*RHO
    Qnh   =    QNHAIL*RHO
    Qns   =    QNSNOW*RHO
    Qni   =    QNICE*RHO
    Qng   =    QNGRAUPEL*RHO
    Qnc   =    QNCLOUD*RHO
    
    
    print 'Q>=1e-10'
    Qr=data_process(Qr)
    Qh=data_process(Qh)
    Qs=data_process(Qs)
    Qi=data_process(Qi)    
    Qg=data_process(Qg)
    Qc=data_process(Qc)
    print 'finished'
    print ' '
#problem 20151010
    print 'Nt>=0.1'
    Qnr=num_process(Qnr)
    Qnh=num_process(Qnh)
    Qns=num_process(Qns)
    Qni=num_process(Qni)    
    Qng=num_process(Qng)
    Qnc=num_process(Qnc)    
    
    print 'finished'
    print ' '
    
    
    #-------------------------------------------------------------------------
    # global gamma_u
    #-------------------------------------------------------------------------
    gamma_u  =   0
    

    #-------------------------------------------------------------------------
    # starting polar calculation
    #-------------------------------------------------------------------------
    
    #-------------------------------------------------------------------------
    # setup rain
    #-------------------------------------------------------------------------
    
    [aaa,bbb,ccc]=Qr.shape    
    
    print 'start rain...'
    [n0,lamda]=setup_tmatrix(Qr,Qnr,gamma_u,RHO,1)

    scatterer = Scatterer(wavelength=tmatrix_aux.wl_X,m=refractive.m_w_10C[tmatrix_aux.wl_X])
    scatterer.psd_integrator = PSDIntegrator()
    scatterer.psd_integrator.axis_ratio_func = lambda D: 1.0/drop_ar(D)
    scatterer.psd_integrator.D_max=10.0
    scatterer.psd_integrator.geometries=(tmatrix_aux.geom_horiz_back,tmatrix_aux.geom_horiz_forw)
    scatterer.or_pdf = orientation.gaussian_pdf(20.0)
    scatterer.orient = orientation.orient_averaged_fixed
    scatterer.psd_integrator.init_scatter_table(scatterer)
    
    #--------------------------------------------------------------------------
    # start tmatrix
    #--------------------------------------------------------------------------    
    print('start tmatrix...')
    os.chdir(main_dir+output_data)
    
    print('start calculate...refl,zdr,zi,ldr,rhv')
    #--------------------------------------------------------------------------
    n0=n0.reshape(-1)
    lamda=lamda.reshape(-1)

    r_refl,r_zdr,r_zi,r_ldr,r_rhv=apply(cal_tm4,(n0,lamda,gamma_u,scatterer))
    
    r_refl= r_refl.reshape(aaa,bbb,ccc)
    #r_refl= lg_refl(r_refl)
    r_zdr = r_zdr.reshape(aaa,bbb,ccc)
    r_zi  = r_zi.reshape(aaa,bbb,ccc)
    r_ldr = r_ldr.reshape(aaa,bbb,ccc)
    r_rhv = r_rhv.reshape(aaa,bbb,ccc)
    print('finished')
    
    print 'saving data...',
    np.save('r_refl.npy',r_refl)
    np.save('r_zdr.npy',r_zdr)
    np.save('r_zi.npy',r_zi)
    np.save('r_ldr.npy',r_ldr)
    np.save('r_rhv.npy',r_rhv)
    print 'finished'
    
    #------------------------------------------------------------------------------
    #   cal kdp,ai                  
    #------------------------------------------------------------------------------
    
    print('start calculate...kdp,ai')

    scatterer.set_geometry(tmatrix_aux.geom_horiz_forw)
    
    r_kdp,r_ai=apply(cal_tm2,(n0,lamda,gamma_u,scatterer))
    
    r_kdp = r_kdp.reshape(aaa,bbb,ccc)
    r_ai  = r_ai.reshape(aaa,bbb,ccc)    
    print 'finished'
    
    print 'saving data...',
    np.save('r_kdp.npy',r_kdp)
    np.save('r_ai.npy',r_ai)
    print 'finished'
    
    #------------------------------------------------------------------
    # setup cloud
    #------------------------------------------------------------------
    [aaa,bbb,ccc]=Qc.shape
    
    print 'start cloud...'
    [n0,lamda]=setup_tmatrix(Qc,Qnc,gamma_u,RHO,1)

    scatterer = Scatterer(wavelength=tmatrix_aux.wl_X,m=refractive.m_w_10C[tmatrix_aux.wl_X])
    scatterer.psd_integrator = PSDIntegrator()
    scatterer.psd_integrator.axis_ratio_func = lambda D: 1.0/drop_ar(D)
    scatterer.psd_integrator.D_max=5.0
    scatterer.psd_integrator.geometries=(tmatrix_aux.geom_horiz_back,tmatrix_aux.geom_horiz_forw)
    scatterer.or_pdf = orientation.gaussian_pdf(5.0)
    scatterer.orient = orientation.orient_averaged_fixed
    scatterer.psd_integrator.init_scatter_table(scatterer)
    
    #--------------------------------------------------------------------------
    # start tmatrix
    #--------------------------------------------------------------------------
    
    print('start tmatrix...')
    os.chdir(main_dir+output_data)
    
    print('start calculate...refl,zdr,zi,ldr,rhv')
    #--------------------------------------------------------------------------
    n0=n0.reshape(-1)
    lamda=lamda.reshape(-1)

    c_refl,c_zdr,c_zi,c_ldr,c_rhv=apply(cal_tm4,(n0,lamda,gamma_u,scatterer))
    
    c_refl= c_refl.reshape(aaa,bbb,ccc)
    #c_refl= lg_refl(c_refl)
    c_zdr = c_zdr.reshape(aaa,bbb,ccc)
    c_zi  = c_zi.reshape(aaa,bbb,ccc)
    c_ldr = c_ldr.reshape(aaa,bbb,ccc)
    c_rhv = c_rhv.reshape(aaa,bbb,ccc)
    print('finished')
    
    print 'saving data...',
    np.save('c_refl.npy',c_refl)
    np.save('c_zdr.npy',c_zdr)
    np.save('c_zi.npy',c_zi)
    np.save('c_ldr.npy',c_ldr)
    np.save('c_rhv.npy',c_rhv)
    print 'finished'
    
    #------------------------------------------------------------------------------
    #   cal kdp,ai                  
    #------------------------------------------------------------------------------
    
    print('start calculate...kdp,ai')

    scatterer.set_geometry(tmatrix_aux.geom_horiz_forw)
    
    c_kdp,c_ai=apply(cal_tm2,(n0,lamda,gamma_u,scatterer))
    
    c_kdp = c_kdp.reshape(aaa,bbb,ccc)
    c_ai  = c_ai.reshape(aaa,bbb,ccc)    
    print 'finished'
    
    print 'saving data...',
    np.save('c_kdp.npy',c_kdp)
    np.save('c_ai.npy',c_ai)
    print 'finished'
    
    #------------------------------------------------------------------
    # setup snow
    #------------------------------------------------------------------
    [aaa,bbb,ccc]=Qs.shape     
    print 'start snow...'
    [n0,lamda]=setup_tmatrix(Qs,Qns,gamma_u,RHO,3)

    scatterer = Scatterer(wavelength=tmatrix_aux.wl_X,m=refractive.m_w_10C[tmatrix_aux.wl_X])
    scatterer.psd_integrator = PSDIntegrator()
    scatterer.psd_integrator.axis_ratio_func = lambda D: 1.0/drop_ar(D)
    scatterer.psd_integrator.D_max=5.0
    scatterer.psd_integrator.geometries=(tmatrix_aux.geom_horiz_back,tmatrix_aux.geom_horiz_forw)
    scatterer.or_pdf = orientation.gaussian_pdf(5.0)
    scatterer.orient = orientation.orient_averaged_fixed
    scatterer.psd_integrator.init_scatter_table(scatterer)
    
    #--------------------------------------------------------------------------
    # start tmatrix
    #--------------------------------------------------------------------------
    
    print('start tmatrix...')
    os.chdir(main_dir+output_data)
    
    print('start calculate...refl,zdr,zi,ldr,rhv')
    #--------------------------------------------------------------------------
    n0=n0.reshape(-1)
    lamda=lamda.reshape(-1)

    r_refl,r_zdr,r_zi,r_ldr,r_rhv=apply(cal_tm4,(n0,lamda,gamma_u,scatterer))
    
    r_refl= r_refl.reshape(aaa,bbb,ccc)
    #r_refl= lg_refl(r_refl)
    r_zdr = r_zdr.reshape(aaa,bbb,ccc)
    r_zi  = r_zi.reshape(aaa,bbb,ccc)
    r_ldr = r_ldr.reshape(aaa,bbb,ccc)
    r_rhv = r_rhv.reshape(aaa,bbb,ccc)
    print('finished')
    
    print 'saving data...',
    np.save('r_refl.npy',r_refl)
    np.save('r_zdr.npy',r_zdr)
    np.save('r_zi.npy',r_zi)
    np.save('r_ldr.npy',r_ldr)
    np.save('r_rhv.npy',r_rhv)
    print 'finished'
    
#------------------------------------------------------------------------------
#   cal kdp,ai                  
#------------------------------------------------------------------------------
    
    print('start calculate...kdp,ai')

    scatterer.set_geometry(tmatrix_aux.geom_horiz_forw)
    
    r_kdp,r_ai=apply(cal_tm2,(n0,lamda,gamma_u,scatterer))
    
    r_kdp = r_kdp.reshape(aaa,bbb,ccc)
    r_ai  = r_ai.reshape(aaa,bbb,ccc)    
    print 'finished'
    
    print 'saving data...',
    np.save('r_kdp.npy',r_kdp)
    np.save('r_ai.npy',r_ai)
    print 'finished'
    
    #------------------------------------------------------------------
    # setup ice
    #------------------------------------------------------------------
    [aaa,bbb,ccc]=Qi.shape
    print 'start ice...'
    [n0,lamda]=setup_tmatrix(Qs,Qns,gamma_u,RHO,2)

    scatterer = Scatterer(wavelength=tmatrix_aux.wl_X,m=refractive.m_w_10C[tmatrix_aux.wl_X])
    scatterer.psd_integrator = PSDIntegrator()
    scatterer.psd_integrator.axis_ratio_func = lambda D: 1.0/drop_ar(D)
    scatterer.psd_integrator.D_max=5.0
    scatterer.psd_integrator.geometries=(tmatrix_aux.geom_horiz_back,tmatrix_aux.geom_horiz_forw)
    scatterer.or_pdf = orientation.gaussian_pdf(5.0)
    scatterer.orient = orientation.orient_averaged_fixed
    scatterer.psd_integrator.init_scatter_table(scatterer)
    
    #--------------------------------------------------------------------------
    # start tmatrix
    #--------------------------------------------------------------------------
    
    print('start tmatrix...')
    os.chdir(main_dir+output_data)
    
    print('start calculate...refl,zdr,zi,ldr,rhv')
    #--------------------------------------------------------------------------
    n0=n0.reshape(-1)
    lamda=lamda.reshape(-1)

    i_refl,i_zdr,i_zi,i_ldr,i_rhv=apply(cal_tm4,(n0,lamda,gamma_u,scatterer))
    
    i_refl= i_refl.reshape(aaa,bbb,ccc)
    #i_refl= lg_refl(i_refl)
    i_zdr = i_zdr.reshape(aaa,bbb,ccc)
    i_zi  = i_zi.reshape(aaa,bbb,ccc)
    i_ldr = i_ldr.reshape(aaa,bbb,ccc)
    i_rhv = i_rhv.reshape(aaa,bbb,ccc)
    print('finished')
    
    print 'saving data...',
    np.save('i_refl.npy',i_refl)
    np.save('i_zdr.npy',i_zdr)
    np.save('i_zi.npy',i_zi)
    np.save('i_ldr.npy',i_ldr)
    np.save('i_rhv.npy',i_rhv)
    print 'finished'
    
#------------------------------------------------------------------------------
#   cal kdp,ai                  
#------------------------------------------------------------------------------
    
    print('start calculate...kdp,ai')

    scatterer.set_geometry(tmatrix_aux.geom_horiz_forw)
    
    i_kdp,i_ai=apply(cal_tm2,(n0,lamda,gamma_u,scatterer))
    
    i_kdp = i_kdp.reshape(aaa,bbb,ccc)
    i_ai  = i_ai.reshape(aaa,bbb,ccc)    
    print 'finished'
    
    print 'saving data...',
    np.save('i_kdp.npy',i_kdp)
    np.save('i_ai.npy',i_ai)
    print 'finished'
    
    #------------------------------------------------------------------
    # setup graupel
    #------------------------------------------------------------------
    [aaa,bbb,ccc]=Qg.shape
    print 'start graupel...'
    [n0,lamda]=setup_tmatrix(Qg,Qng,gamma_u,RHO,2)

    scatterer = Scatterer(wavelength=tmatrix_aux.wl_X,m=refractive.m_w_10C[tmatrix_aux.wl_X])
    scatterer.psd_integrator = PSDIntegrator()
    scatterer.psd_integrator.axis_ratio_func = lambda D: 1.0/drop_ar(D)
    scatterer.psd_integrator.D_max=5.0
    scatterer.psd_integrator.geometries=(tmatrix_aux.geom_horiz_back,tmatrix_aux.geom_horiz_forw)
    scatterer.or_pdf = orientation.gaussian_pdf(5.0)
    scatterer.orient = orientation.orient_averaged_fixed
    scatterer.psd_integrator.init_scatter_table(scatterer)
    
    #--------------------------------------------------------------------------
    # start tmatrix
    #--------------------------------------------------------------------------
    
    print('start tmatrix...')
    os.chdir(main_dir+output_data)
    
    print('start calculate...refl,zdr,zi,ldr,rhv')
    #--------------------------------------------------------------------------
    n0=n0.reshape(-1)
    lamda=lamda.reshape(-1)

    g_refl,g_zdr,g_zi,g_ldr,g_rhv=apply(cal_tm4,(n0,lamda,gamma_u,scatterer))
    
    g_refl= g_refl.reshape(aaa,bbb,ccc)
    #g_refl= lg_refl(g_refl)
    g_zdr = g_zdr.reshape(aaa,bbb,ccc)
    g_zi  = g_zi.reshape(aaa,bbb,ccc)
    g_ldr = g_ldr.reshape(aaa,bbb,ccc)
    g_rhv = g_rhv.reshape(aaa,bbb,ccc)
    print('finished')
    
    print 'saving data...',
    np.save('g_refl.npy',g_refl)
    np.save('g_zdr.npy',g_zdr)
    np.save('g_zi.npy',g_zi)
    np.save('g_ldr.npy',g_ldr)
    np.save('g_rhv.npy',g_rhv)
    print 'finished'
    
#------------------------------------------------------------------------------
#   cal kdp,ai                  
#------------------------------------------------------------------------------
    
    print('start calculate...kdp,ai')

    scatterer.set_geometry(tmatrix_aux.geom_horiz_forw)
    
    g_kdp,g_ai=apply(cal_tm2,(n0,lamda,gamma_u,scatterer))
    
    g_kdp = g_kdp.reshape(aaa,bbb,ccc)
    g_ai  = g_ai.reshape(aaa,bbb,ccc)    
    print 'finished'
    
    print 'saving data...',
    np.save('g_kdp.npy',g_kdp)
    np.save('g_ai.npy',g_ai)
    print 'finished'
    return
